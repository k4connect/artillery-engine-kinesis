'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// Get commit messages
// Object => Promise<Array<String>>
var getCommitMessages = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(settings) {
		var from, to, edit;
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						from = settings.from, to = settings.to, edit = settings.edit;

						if (!edit) {
							_context.next = 3;
							break;
						}

						return _context.abrupt('return', getEditCommit());

					case 3:
						_context.next = 5;
						return getHistoryCommits({ from, to });

					case 5:
						return _context.abrupt('return', _context.sent);

					case 6:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this);
	}));

	return function getCommitMessages(_x) {
		return _ref.apply(this, arguments);
	};
}();

// Get commit messages from history
// Object => Promise<Array<String>>


// Get recently edited commit message
// () => Promise<Array<String>>
var getEditCommit = function () {
	var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
		var top, editFilePath, editFile;
		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						_context2.next = 2;
						return (0, _gitToplevel2.default)();

					case 2:
						top = _context2.sent;
						editFilePath = (0, _path.join)(top, '.git/COMMIT_EDITMSG');
						_context2.next = 6;
						return (0, _fs.readFile)(editFilePath);

					case 6:
						editFile = _context2.sent;
						return _context2.abrupt('return', [`${editFile.toString('utf-8')}\n`]);

					case 8:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, this);
	}));

	return function getEditCommit() {
		return _ref2.apply(this, arguments);
	};
}();

var _path = require('path');

var _gitRawCommits = require('git-raw-commits');

var _gitRawCommits2 = _interopRequireDefault(_gitRawCommits);

var _gitToplevel = require('git-toplevel');

var _gitToplevel2 = _interopRequireDefault(_gitToplevel);

var _fs = require('mz/fs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getCommitMessages;
function getHistoryCommits(options) {
	return new Promise(function (resolve, reject) {
		var data = [];
		(0, _gitRawCommits2.default)(options).on('data', function (chunk) {
			return data.push(chunk.toString('utf-8'));
		}).on('error', reject).on('end', function () {
			resolve(data);
		});
	});
}module.exports = exports['default'];