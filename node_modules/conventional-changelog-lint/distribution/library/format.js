'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = format;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function format(report) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var signs = options.signs,
	    colors = options.colors,
	    enabled = options.color;

	var fmt = new _chalk2.default.constructor({ enabled });

	var problems = [].concat((0, _toConsumableArray3.default)(report.errors), (0, _toConsumableArray3.default)(report.warnings)).map(function (problem) {
		var sign = signs[problem.level];
		var color = colors[problem.level];
		var decoration = fmt[color](sign);
		var name = _chalk2.default.grey(`[${problem.name}]`);
		return `${decoration}   ${problem.message} ${name}`;
	});

	var sign = report.errors.length ? // eslint-disable-line no-nested-ternary
	'✖' : report.warnings.length ? '⚠' : '✔';

	var color = report.errors.length ? // eslint-disable-line no-nested-ternary
	'red' : report.warnings.length ? 'yellow' : 'green';

	var decoration = fmt[color](sign);
	var summary = `${decoration}   found ${report.errors.length} problems, ${report.warnings.length} warnings`;
	return [].concat((0, _toConsumableArray3.default)(problems), [_chalk2.default.bold(summary)]);
}
module.exports = exports['default'];